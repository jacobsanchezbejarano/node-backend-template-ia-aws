// utils/uploadGCS.js
const { Storage } = require('@google-cloud/storage');
const { v4: uuidv4 } = require('uuid');

// ðŸ’¡ Leer las credenciales de Google desde las variables de entorno de Render
const credentials = process.env.GOOGLE_APPLICATION_CREDENTIALS[0] == '{' ? JSON.parse(process.env.GOOGLE_APPLICATION_CREDENTIALS) : require("../"+process.env.GOOGLE_APPLICATION_CREDENTIALS);

// Inicializar el cliente de Storage con las credenciales
const storage = new Storage({ credentials });

const bucketName = process.env.GCS_BUCKET_NAME;

const uploadToGCS = async (file, fileName) => {
Â  if (!bucketName) {
Â  Â  throw new Error('GCS_BUCKET_NAME no estÃ¡ definido en las variables de entorno.');
Â  }

Â  // Crea un archivo en el bucket
Â  const blob = storage.bucket(bucketName).file(fileName);
Â  const blobStream = blob.createWriteStream({
Â  Â  resumable: false,
Â  Â  contentType: file.mimetype,
Â  });

Â  return new Promise((resolve, reject) => {
Â  Â  blobStream.on('error', (err) => reject(err));

Â  Â  blobStream.on('finish', () => {
Â  Â  Â  // La URL pÃºblica de la imagen
Â  Â  Â  const publicUrl = `https://storage.googleapis.com/${bucketName}/${blob.name}`;
Â  Â  Â  resolve(publicUrl);
Â  Â  });

Â  Â  blobStream.end(file.buffer);
Â  });
};

// ðŸ’¡ Esta funciÃ³n es importante para generar URLs prefirmadas seguras para la visualizaciÃ³n
// En lugar de una URL pÃºblica permanente, genera una URL temporal y segura.
const getSignedGCSUrl = async (fileName) => {
Â  if (!bucketName) {
Â  Â  throw new Error('GCS_BUCKET_NAME no estÃ¡ definido en las variables de entorno.');
Â  }
Â  const options = {
Â  Â  version: 'v4',
Â  Â  action: 'read',
Â  Â  expires: Date.now() + 15 * 60 * 1000, // La URL expira en 15 minutos
Â  };
Â  const [url] = await storage.bucket(bucketName).file(fileName).getSignedUrl(options);
Â  return url;
};

module.exports = {
Â  uploadToGCS,
Â  getSignedGCSUrl,
};